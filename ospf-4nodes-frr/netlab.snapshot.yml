addressing:
  l2only: {}
  lan:
    ipv4: 172.16.0.0/16
    prefix: 24
  loopback:
    ipv4: 10.0.0.0/24
    prefix: 32
  mgmt:
    ipv4: 192.168.121.0/24
    mac: 08-4F-A9-00-00-00
    prefix: 24
    start: 100
  p2p:
    ipv4: 10.1.0.0/16
    prefix: 30
  router_id:
    ipv4: 10.0.0.0/24
    prefix: 32
  vrf_loopback:
    ipv4: 10.2.0.0/24
    prefix: 32
defaults:
  _globals:
    _modlist:
    - bfd
    - bgp
    - dhcp
    - eigrp
    - evpn
    - gateway
    - isis
    - lag
    - mpls
    - ospf
    - ripv2
    - routing
    - sr
    - srv6
    - stp
    - vlan
    - vrf
    - vxlan
    hosts:
      a1:
        ipv4:
        - 10.0.0.1
        - 192.168.1.232
        - 10.1.0.1
        - 10.1.0.5
        - 10.1.0.9
        loopback:
        - 10.0.0.1
      a2:
        ipv4:
        - 10.0.0.2
        - 10.1.0.2
        - 10.1.0.13
        - 10.1.0.17
        loopback:
        - 10.0.0.2
      s1:
        ipv4:
        - 10.0.0.3
        - 10.1.0.6
        - 10.1.0.14
        - 10.1.0.21
        loopback:
        - 10.0.0.3
      s2:
        ipv4:
        - 10.0.0.4
        - 10.1.0.10
        - 10.1.0.18
        - 10.1.0.22
        loopback:
        - 10.0.0.4
    node_id_id:
      max: 250
      next: 4
      value: !!set
        1: null
        2: null
        3: null
        4: null
  addressing:
    l2only: null
    lan:
      ipv4: 172.16.0.0/16
    loopback:
      ipv4: 10.0.0.0/24
    mgmt:
      ipv4: 192.168.121.0/24
      mac: 08-4F-A9-00-00-00
      start: 100
    p2p:
      ipv4: 10.1.0.0/16
    router_id:
      ipv4: 10.0.0.0/24
      prefix: 32
    vrf_loopback:
      ipv4: 10.2.0.0/24
      prefix: 32
  attributes:
    _prefix:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      pool:
        _valid_with:
        - allocation
        type: str
    _r_import:
      _description: 'Routing protocol import specification. Each entry specifies a
        protocol to

        import. Values might contain routing policies

        '
      _keytype: r_proto
      _list_to_dict: true
      _subtype:
        _alt_types:
        - NoneType
        - bool
        policy:
          _requires:
          - routing
          type: id
      type: dict
    _v_entry:
      _description: Single network validation test (an entry in the validate dictionary)
      config:
        _alt_types:
        - str
        template: str
        variable: dict
      description: str
      devices:
        _subtype: device
        type: list
      exec: _v_option
      fail: str
      level:
        type: str
        valid_values:
        - warning
      nodes:
        _subtype: node_id
        type: list
      pass: str
      plugin: str
      show: _v_option
      stop_on_error: bool
      suzieq:
        _alt_types:
        - str
        expect:
          type: str
          valid_values:
          - empty
        show: str
        valid:
          type: str
          valid_values:
          - all
          - any
      valid: _v_option
      wait: int
      wait_msg: str
    _v_option:
      _alt_types:
      - str
      _description: 'A "show", "exec" or "valid" parameter in a network validation
        test. It''s a

        dictionary of device types with each value being a command to execute or

        expression to evaluate.

        '
      _keytype: device
      type: dict
    aspath_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      path:
        _alt_types:
        - str
        - asn
        _subtype: asn
        type: list
      sequence:
        max_value: 32767
        min_value: 1
        type: int
    can_be_false:
    - link
    - interface
    community_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      list:
        _valid_with:
        - action
        - sequence
        type: list
      path:
        _valid_with:
        - action
        - sequence
        type: list
      regexp:
        _valid_with:
        - action
        - sequence
        type: str
      sequence:
        max_value: 32767
        min_value: 1
        type: int
    global:
      addressing:
        _keytype: id
        type: dict
      defaults: null
      groups: null
      links: null
      module: null
      name:
        _help: 'Topology name should be no longer than 16 characters. It should start
          with a letter

          and contain letters, underscores or numbers. netlab derives it from the
          directory name

          when it''s not specified in the lab topology file.

          '
        type: id
      nodes: null
      plugin:
        _subtype: str
        type: list
      prefix:
        _keytype: id
        _subtype: _prefix
        type: dict
      provider: id
      tools:
        _subtype:
          create_empty: true
          type: dict
        type: dict
      validate:
        _keytype: id
        _subtype: _v_entry
        type: dict
      version: null
      vlans:
        _keytype: id
        _requires:
        - vlan
        _subtype: vlan
        type: dict
      vrfs:
        _keytype: id
        _requires:
        - vrf
        _subtype: vrf
        type: dict
    interface:
      ifindex: int
      ifname: str
      ipv4:
        type: ipv4
        use: interface
      ipv6:
        type: ipv6
        use: interface
      node: node_id
    internal:
      Plugin: null
      Provider: null
      input: null
      message: str
      pools: dict
    link:
      bandwidth: int
      bridge: id
      disable: bool
      interfaces: null
      mtu:
        max_value: 9216
        min_value: 64
        type: int
      name: str
      pool: id
      prefix:
        _alt_types:
        - bool_false
        - prefix_str
        - named_pfx
        _keys:
          _name: str
          allocation:
            type: str
            valid_values:
            - p2p
            - sequential
            - id_based
          ipv4:
            type: ipv4
            use: prefix
          ipv6:
            type: ipv6
            use: prefix
        type: dict
      role: id
      type:
        type: str
        valid_values:
        - lan
        - p2p
        - stub
        - loopback
        - tunnel
        - vlan_member
      unnumbered: bool
      vlan_name: id
    link_internal:
      linkindex: int
      parentindex: int
    link_module_no_propagate:
    - vlan
    - dhcp
    link_no_propagate:
    - prefix
    - interfaces
    - gateway
    node:
      box: str
      config: list
      cpu: null
      device: device
      group: list
      id:
        max_value: 150
        min_value: 1
        type: int
      interfaces: list
      loopback:
        ipv4:
          type: ipv4
          use: prefix
        ipv6:
          type: ipv6
          use: prefix
        pool: addr_pool
      memory: int
      mgmt:
        ifname: str
        ipv4:
          type: ipv4
          use: id
        ipv6:
          type: ipv6
          use: id
        mac: str
      module:
        _subtype: id
        type: list
      mtu:
        max_value: 9216
        min_value: 64
        type: int
      name: str
      provider: id
      role: id
      unmanaged: bool
      vlans:
        _keytype: id
        _requires:
        - vlan
        _subtype: node_vlan
        type: dict
      vrfs:
        _keytype: id
        _requires:
        - vrf
        _subtype: vrf
        type: dict
    node_group:
      _description: Node groups
      _namespace:
      - node
      config: list
      device: device
      members:
        _subtype: id
        type: list
      module: list
      node_data:
        true_value: {}
        type: dict
      vars: dict
    node_vlan:
      _description: Node VLAN definition
      _namespace:
      - link
      - interface
      id:
        max_value: 4095
        min_value: 1
        type: int
      links: list
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
      prefix: null
      stp:
        enable: bool
        priority:
          max_value: 61440
          min_value: 0
          type: int
      vni:
        max_value: 16777215
        min_value: 1
        type: int
    pfx_entry:
      action:
        type: str
        valid_values:
        - permit
        - deny
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      max:
        _alt_types:
        - int
        ipv4:
          max_value: 32
          min_value: 0
          type: int
        ipv6:
          max_value: 128
          min_value: 0
          type: int
      min:
        _alt_types:
        - int
        ipv4:
          max_value: 32
          min_value: 0
          type: int
        ipv6:
          max_value: 128
          min_value: 0
          type: int
      pool:
        _valid_with:
        - action
        - sequence
        - min
        - max
        type: addr_pool
      prefix:
        _valid_with:
        - action
        - sequence
        - min
        - max
        type: named_pfx
      sequence:
        max_value: 32767
        min_value: 1
        type: int
    pool:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      mac: mac
      prefix:
        max_value: 32
        min_value: 1
        type: int
      prefix6:
        max_value: 128
        min_value: 1
        type: int
      start:
        min_value: 1
        type: int
      unnumbered: bool
    pool_no_copy:
    - start
    - prefix
    - mac
    prefix:
      allocation:
        type: str
        valid_values:
        - p2p
        - sequential
        - id_based
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
    rp_entry:
      _description: Routing policy entry
      action:
        type: str
        valid_values:
        - permit
        - deny
      match:
        aspath: str
        community: str
        nexthop: str
        prefix: str
      sequence:
        max_value: 32767
        min_value: 1
        type: int
      set:
        community:
          append: bool
          delete: bool
          extended: list
          large: list
          standard: list
        locpref:
          max_value: 4294967295
          min_value: 0
          type: int
        med:
          max_value: 32767
          min_value: 0
          type: int
        prepend:
          count:
            max_value: 32
            min_value: 1
            type: int
          path: str
        weight:
          max_value: 65535
          min_value: 0
          type: int
    static_entry:
      include:
        _valid_with:
        - nexthop
        - vrf
        type: id
      ipv4:
        type: ipv4
        use: prefix
      ipv6:
        type: ipv6
        use: prefix
      nexthop:
        ipv4:
          type: ipv4
          use: address
        ipv6:
          type: ipv6
          use: address
        node:
          _valid_with:
          - none
          type: node_id
        vrf:
          _alt_types: NoneType
          type: id
      node:
        _valid_with:
        - nexthop
        - vrf
        type: node_id
      pool:
        _valid_with:
        - nexthop
        - vrf
        type: addr_pool
      prefix:
        _valid_with:
        - nexthop
        - vrf
        type: named_pfx
      vrf:
        type: id
    vlan:
      _description: Global VLAN definition
      _namespace:
      - link
      id:
        max_value: 4095
        min_value: 1
        type: int
      links: list
      mode:
        type: str
        valid_values:
        - bridge
        - irb
        - route
      prefix: null
      vni:
        max_value: 16777215
        min_value: 1
        type: int
    vlan_group:
      _description: VLAN groups
      _namespace:
      - vlan
      - link
      members:
        _subtype: id
        type: list
      type: str
    vrf:
      _description: Global or node-level VRF definition
      _namespace:
      - link
      export: list
      id:
        min_value: 1
        type: int
      import: list
      links: list
      loopback: null
      rd: rd
    vrf_group:
      _description: VRF groups
      _namespace:
      - vrf
      members:
        _subtype: id
        type: list
      type: str
  automation:
    ansible:
      cleanup:
      - ansible.cfg
      - hosts.yml
      - group_vars
      - host_vars
      - config
  bfd:
    attributes:
      global:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      link:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
      node:
        min_echo_rx:
          min_value: 0
          type: int
        min_rx:
          min_value: 1
          type: int
        min_tx:
          min_value: 1
          type: int
        multiplier:
          min_value: 0
          type: int
    min_echo_rx: 0
    multiplier: 3
    supported_on:
    - arubacx
    - cat8000v
    - csr
    - cumulus
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - junos
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
  bgp:
    advertise_loopback: true
    advertise_roles:
    - stub
    attributes:
      as_list:
        _keytype: int
        _subtype:
          members:
            _required: true
            _subtype: node_id
            type: list
          rr:
            _subtype: node_id
            type: list
        type: dict
      global:
        activate:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        advertise_loopback: bool
        advertise_roles: list
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
        as_list: dict
        community:
          _alt_types:
          - str
          - BoxList
          ebgp:
          - standard
          - extended
          - large
          - 2octet
          ibgp:
          - standard
          - extended
          - large
          - 2octet
        ebgp_role: str
        next_hop_self: bool
        replace_global_as: bool
        rr_cluster_id:
          type: ipv4
          use: id
        rr_list: list
        sessions:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
      interface:
        local_as: asn
        replace_global_as: bool
      link:
        advertise: bool
      node:
        activate:
          ipv4:
          - ibgp
          - ebgp
          ipv6:
          - ibgp
          - ebgp
        advertise_loopback: bool
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as:
          _required: true
          type: asn
        community:
          _alt_types:
          - str
          - BoxList
          ebgp:
          - standard
          - extended
          - large
          - 2octet
          ibgp:
          - standard
          - extended
          - large
          - 2octet
        import: _r_import
        local_as: asn
        next_hop_self: bool
        originate:
          _subtype:
            named: true
            type: ipv4
            use: prefix
          type: list
        replace_global_as: bool
        router_id:
          type: ipv4
          use: id
        rr: bool
        rr_cluster_id:
          type: ipv4
          use: id
        sessions:
          ipv4:
          - ibgp
          - ebgp
          - localas_ibgp
          ipv6:
          - ibgp
          - ebgp
          - localas_ibgp
      node_copy:
      - local_as
      - replace_global_as
      vrf:
        import: _r_import
        router_id:
          type: ipv4
          use: id
    community:
      ebgp:
      - standard
      ibgp:
      - standard
      - extended
    config_after:
    - routing
    ebgp_role: external
    features:
      activate_af: Can control activation of individual address families
      community: Granular BGP community propagation
      import: Import routes from other routing protocols
      ipv6_lla: Can run EBGP sessions over IPv6 link-local addresses
      local_as: Supports local-as functionality
      local_as_ibgp: Can use local-as to create IBGP sesssion
      rfc8950: Can run IPv4 AF over regular IPv6 EBGP session
      vrf_local_as: Supports local-as within a VRF
    next_hop_self: true
    no_propagate:
      advertise_roles: null
      as_list: null
      ebgp_role: null
      rr_list: null
    supported_on:
    - arubacx
    - asav
    - bird
    - cat8000v
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - iosxr
    - junos
    - none
    - nxos
    - routeros
    - routeros7
    - sonic
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    warnings:
      igp_list:
      - ospf
      - eigrp
      - isis
      - ripv2
      missing_igp: true
  const:
    ifname:
      maxlength: 255
      neighbors: 5
    multi_provider:
    - libvirt
    - clab
    routing_protocols:
    - bgp
    - connected
    - eigrp
    - isis
    - ospf
    - ripv2
    vrf_igp_protocols:
    - connected
    - ospf
    - isis
    - ripv2
  daemons:
    bird:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          docker_shell: bash -il
          netlab_show_command:
          - birdc
          - show $@
        image: netlab/bird:latest
      daemon_config:
        bgp: /etc/bird/bgp.mod.conf
        bird: /etc/bird/bird.conf
        ospf: /etc/bird/ospf.mod.conf
      description: BIRD Internet Routing Daemon
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
        dhcp: false
        ospf:
          unnumbered: false
      libvirt:
        image: null
      loopback_interface_name: lo{ifindex if ifindex else ""}
      packages:
        bird: bird
      virtualbox:
        image: null
    dnsmasq:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          docker_shell: bash -il
        image: netlab/dnsmasq:latest
      daemon_config:
        dhcp: /etc/dhcp.ignore
        dnsmasq: /etc/dnsmasq.conf
      description: BIRD Internet Routing Daemon
      dhcp:
        server: true
      features:
        dhcp:
          server: true
      libvirt:
        image: null
      module:
      - dhcp
      node:
        module:
        - dhcp
      packages:
        dnsmasq: dnsmasq
      virtualbox:
        image: null
  device: frr
  devices:
    arubacx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-aoscx/
        group_vars:
          netlab_check_delay: 15
          netlab_check_retries: 40
        image: vrnetlab/aruba_arubaos-cx:20240731173624
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-aoscx
      description: ArubaOS-CX
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          import:
          - ospf
          - connected
          - vrf
          local_as: true
          local_as_ibgp: false
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        lag:
          mlag:
            peer:
              ifindex: 255
              mac: 0600.0000.0000
          passive: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          default: true
          import:
          - bgp
          - connected
          - vrf
          password: true
          priority: true
          timers: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                delete: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        stp:
          enable_per_port: true
          supported_protocols:
          - mstp
          - pvrst
          - stp
        vlan:
          model: switch
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: arubanetworks.aoscx.aoscx
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: arubacx
      ifindex_offset: 1
      interface_name: 1/1/{ifindex}
      lag_interface_name: lag {lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/arubacx/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=4096 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: aruba/cx
      loopback_interface_name: loopback {ifindex}
      mgmt_if: mgmt
      tunnel_interface_name: tunnel {ifindex}
    asav:
      description: Cisco ASAv
      external:
        image: none
      features:
        bgp: {}
        isis: {}
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant1
        ansible_connection: network_cli
        ansible_network_os: asa
        ansible_ssh_pass: vagrant1
        ansible_user: vagrant
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group14-sha1 -o PubkeyAcceptedKeyTypes=+ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      ifindex_offset: 0
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/asav/
        create_iso: asav
        create_template: asav.xml.j2
        image: cisco/asav
      mgmt_if: Management0/0
    bird:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          ansible_connection: docker
          ansible_user: root
          docker_shell: bash -il
          netlab_linux_distro: vanilla
          netlab_show_command:
          - birdc
          - show $@
        image: netlab/bird:latest
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      daemon: true
      daemon_config:
        bgp: /etc/bird/bgp.mod.conf
        bird: /etc/bird/bird.conf
        ospf: /etc/bird/ospf.mod.conf
      daemon_parent: linux
      description: BIRD Internet Routing Daemon
      external:
        image: none
      features:
        bgp:
          activate_af: true
          local_as: true
          local_as_ibgp: true
        lag:
          passive: false
        ospf:
          unnumbered: false
        routing:
          static: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_device_type: bird
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      packages:
        bird: bird
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
    cat8000v:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-c8000v/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 50
        image: vrnetlab/vr-c8000v:17.13.01a
        interface:
          name: eth{ifindex-1}
        node:
          kind: cisco_c8000v
      description: Cisco CSR 1000v
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 9216
          min_mtu: 68
          min_phy_mtu: 1500
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: cat8000v
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      ifindex_offset: 2
      interface_name: GigabitEthernet{ifindex}
      libvirt:
        build: https://netlab.tools/labs/cat8000v/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0
          --arch=x86_64 --cpu host --vcpus=1 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --network=network:vagrant-libvirt,model=virtio --graphics none --import
        create_iso: cat8000v
        create_template: cat8000v.xml.j2
        image: cisco/cat8000v
      loopback_interface_name: Loopback{ifindex}
      node:
        min_mtu: 1500
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox: {}
    csr:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-csr/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 50
        image: vrnetlab/vr-csr:17.03.04
        interface:
          name: eth{ifindex-1}
        node:
          kind: cisco_csr1000v
      description: Cisco CSR 1000v
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 9216
          min_mtu: 68
          min_phy_mtu: 1500
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
        vxlan: {}
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: csr
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      ifindex_offset: 2
      interface_name: GigabitEthernet{ifindex}
      libvirt:
        build: https://netlab.tools/labs/csr/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=rhel4.0
          --arch=x86_64 --cpu host --vcpus=1 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --network=network:vagrant-libvirt,model=virtio --graphics none --import
        image: cisco/csr1000v
      loopback_interface_name: Loopback{ifindex}
      node:
        min_mtu: 1500
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/csr1000v
    cumulus:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:4.4.0
        kmods: null
        node:
          config_templates:
            hosts: /etc/hosts
            interfaces: /etc/network/interfaces
          kind: cvx
          runtime: docker
      description: Cumulus VX 4.x or 5.x configured without NVUE
      evpn:
        _start_transit_vlan: 3900
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - ripv2
          - connected
          - vrf
          ipv6_lla: true
          local_as: true
          rfc8950: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay:
            ipv4: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        lag:
          passive: false
        ospf:
          default: true
          import:
          - bgp
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
        vlan:
          model: switch
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ripng: true
          ripv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_initial: always
        netlab_show_command:
        - sudo
        - vtysh
        - -c
        - show $@
      interface_name: swp{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:4.4.5
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      tunnel_interface_name: tun{ifindex}
      virtualbox:
        image: CumulusCommunity/cumulus-vx:4.3.0
    cumulus_nvue:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
        image: networkop/cx:5.3.0
        kmods:
          initial:
          - ebtables
        node:
          kind: cvx
          runtime: docker
      description: Cumulus VX 5.x configured with NVUE
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: false
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        lag:
          mlag:
            peer:
              backup_ip: loopback.ipv4
              global: true
              ip: linklocal
              mac: 44:38:39:ff:00:00
              vlan: 4094
          passive: false
        ospf:
          priority: true
          timers: true
          unnumbered: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - pvrst
        vlan:
          model: switch
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          ospfv2: true
      graphite:
        icon: switch
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: cumulus_nvue
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: GetLost1!
        ansible_user: cumulus
      interface_name: swp{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        image: CumulusCommunity/cumulus-vx:5.10.0
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      virtualbox:
        image: CumulusCommunity/cumulus-vx:5.10.0
    dellos10:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-ftosv/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 40
        image: vrnetlab/vr-ftosv
        interface:
          name: eth{ifindex}
        node:
          kind: vr-ftosv
      description: Dell OS10
      external:
        image: none
      features:
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: false
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          delay: 30
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        lag:
          mlag:
            peer:
              ip: loopback.ipv4
              mac: 0200.01a9.0000
          passive: true
          reserved_ifindex_range:
          - 1000
        ospf:
          password: true
          priority: true
          timers: true
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
        vlan:
          model: switch
          svi_interface_name: virtual-network{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: dellos10
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: ethernet1/1/{ifindex}
      lag_interface_name: port-channel{lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/dellos10/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=4096 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=sata --disk
          path=hdb_OS10-installer.qcow2,format=qcow2,bus=virtio --disk path=hdc_OS10-platform.qcow2,format=qcow2,bus=virtio
        image: dell/os10
        pre_install: dellos10
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt1/1/1
      mtu: 1500
    dnsmasq:
      clab:
        build: https://netlab.tools/netlab/clab/#netlab-clab-build
        group_vars:
          ansible_connection: docker
          ansible_user: root
          docker_shell: bash -il
          netlab_linux_distro: vanilla
        image: netlab/dnsmasq:latest
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      daemon: true
      daemon_config:
        dhcp: /etc/dhcp.ignore
        dnsmasq: /etc/dnsmasq.conf
      daemon_parent: linux
      description: BIRD Internet Routing Daemon
      dhcp:
        server: true
      external:
        image: none
      features:
        dhcp:
          client:
            ipv4: true
            ipv6: true
          relay:
            ipv4: true
          server: true
        lag:
          passive: false
        routing:
          static: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_device_type: dnsmasq
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
      mgmt_if: eth0
      module:
      - dhcp
      node:
        module:
        - dhcp
      packages:
        dnsmasq: dnsmasq
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
    eos:
      attributes:
        node:
          eos:
            serialnumber: str
            systemmacaddr: mac
      bgp:
        _cprop_order:
        - standard
        - extended
        - large
        - link-bandwidth
      clab:
        build: https://netlab.tools/labs/ceos/
        group_vars:
          ansible_become: true
          ansible_become_method: enable
          ansible_ssh_pass: admin
          ansible_user: admin
        image: ceos:4.32.1F
        interface:
          name: et{ifindex}
        mgmt_if: Management0
        node:
          env:
            CLAB_MGMT_VRF: management
            INTFTYPE: et
          kind: ceos
      description: Arista vEOS VM or cEOS container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
          relay: true
          server: true
          vrf: true
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          system_mtu: true
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        lag:
          mlag:
            peer:
              ifindex: 4094
              ip: 169.254.127.0/31
              vlan: 4094
          passive: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: false
          passive: false
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
            - locpref
            - med
            - weight
            - prepend
            - community
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          isis: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: switch
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: eos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet{ifindex}
      lag_interface_name: port-channel{lag.ifindex}
      libvirt:
        build: https://netlab.tools/labs/eos/
        create_template: eos.xml.j2
        image: arista/veos
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: Management1
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: arista/veos
    fortios:
      description: Fortinet FortiOS firewall
      external:
        image: none
      features:
        ospf: {}
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: httpapi
        ansible_httpapi_port: 80
        ansible_httpapi_use_ssl: false
        ansible_httpapi_validate_certs: false
        ansible_network_os: fortinet.fortios.fortios
        ansible_password: admin
        ansible_user: admin
        collections:
        - fortinet.fortios
        netlab_console_connection: ssh
        vdom: root
      ifindex_offset: 2
      interface_name: port{ifindex}
      libvirt:
        image: fortinet/fortios
      mgmt_if: port1
    frr:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_mgmt_vrf: true
          netlab_show_command:
          - vtysh
          - -c
          - show $@
        image: quay.io/frrouting/frr:10.0.1
        kmods: null
        node:
          config_templates:
            daemons: /etc/frr/daemons
            hosts: /etc/hosts
          kind: linux
      description: FRR container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          import:
          - ospf
          - ripv2
          - isis
          - connected
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          rfc8950: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - vrrp
          - anycast
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          import:
          - bgp
          - ripv2
          - ospf
          - connected
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        lag:
          passive: false
        mpls:
          ldp: true
          vpn:
            ipv4: true
        ospf:
          default: true
          import:
          - bgp
          - ripv2
          - isis
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        stp:
          enable_per_port: false
          supported_protocols:
          - stp
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          isis: true
          keep_module: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_initial: always
        netlab_linux_packages:
          curl: curl
          gnupg: gpg
          iproute2: bridge
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: vagrant
          ansible_user: vagrant
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: debian/bookworm64
      loopback_interface_name: lo{ifindex if ifindex else ""}
      mgmt_if: eth0
      mtu: 1500
      routing:
        _rm_per_af: true
      tunnel_interface_name: tun{ifindex}
      virtualbox:
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: vagrant
          ansible_user: vagrant
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: debian/bookworm64
    iol:
      clab:
        build: https://containerlab.dev/manual/kinds/cisco_iol/
        group_vars:
          ansible_become_password: admin
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 20
          netlab_device_type: iol
        image: vrnetlab/cisco_iol:17.12.01
        interface:
          name: Ethernet{ifindex // 4}/{ifindex % 4}
        node:
          kind: cisco_iol
      description: Cisco IOL
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 1500
          min_mtu: 68
          min_phy_mtu: 1501
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BDI{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_connection: network_cli
        ansible_network_os: ios
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: Ethernet{ifindex // 4}/{ifindex % 4}
      loopback_interface_name: Loopback{ifindex}
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
    ioll2:
      clab:
        build: https://containerlab.dev/manual/kinds/cisco_iol/
        group_vars:
          ansible_become_password: admin
          ansible_ssh_pass: admin
          ansible_user: admin
          netlab_check_retries: 20
          netlab_device_type: ioll2
        image: vrnetlab/cisco_iol:L2-17.12.01
        interface:
          name: Ethernet{ifindex // 4}/{ifindex % 4}
        mtu: 1500
        node:
          kind: cisco_iol
          type: l2
      description: IOSv L2 image
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 1500
          min_mtu: 68
          min_phy_mtu: 1501
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        vlan:
          mixed_trunk: false
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_connection: network_cli
        ansible_network_os: ios
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: Ethernet{ifindex // 4}/{ifindex % 4}
      loopback_interface_name: Loopback{ifindex}
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
    iosv:
      clab:
        build: https://github.com/hellt/vrnetlab/tree/master/vios
        group_vars:
          ansible_ssh_pass: VR-netlab9
          ansible_user: vrnetlab
          netlab_check_retries: 50
        image: vrnetlab/cisco_vios:15.9.3
        interface:
          name: eth{ifindex}
        node:
          kind: linux
      description: Cisco IOSv
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
          max_mtu: 9600
          min_mtu: 64
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: BVI{bvi}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: ios
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: GigabitEthernet0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/iosv/
        create_template: iosv.xml.j2
        image: cisco/iosv
      loopback_interface_name: Loopback{ifindex}
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/iosv
    iosvl2:
      clab:
        build: https://github.com/hellt/vrnetlab/tree/master/vios
        group_vars:
          ansible_ssh_pass: VR-netlab9
          ansible_user: vrnetlab
          netlab_check_retries: 50
        image: vrnetlab/cisco_vios:15.9.3
        interface:
          name: eth{ifindex}
        node:
          kind: linux
      description: IOSv L2 image
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          community:
            extended:
            - extended
            standard:
            - standard
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: false
          ipv6:
            lla: true
          max_mtu: 4700
          min_mtu: 68
          min_phy_mtu: 1500
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                standard: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        vlan:
          mixed_trunk: false
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
      graphite:
        icon: router
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: ios
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        netlab_device_type: iosvl2
        netlab_initial: always
        netlab_ssh_args: -o KexAlgorithms=+diffie-hellman-group-exchange-sha1 -o PubkeyAcceptedKeyTypes=ssh-rsa
          -o HostKeyAlgorithms=+ssh-rsa
      interface_name: GigabitEthernet{ifindex // 4}/{ifindex % 4}
      libvirt:
        build: https://netlab.tools/labs/iosvl2/
        create_template: iosv.xml.j2
        image: cisco/iosvl2
      loopback_interface_name: Loopback{ifindex}
      routing:
        _rm_per_af: true
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: cisco/iosv
    iosxr:
      clab:
        build: https://containerlab.dev/manual/kinds/xrd/
        group_vars:
          ansible_become_password: clab@123
          ansible_ssh_pass: clab@123
          ansible_user: clab
        image: ios-xr/xrd-control-plane:7.11.1
        interface:
          name: Gi0-0-0-{ifindex}
        mgmt_if: MgmtEth0/RP0/CPU0/0
        node:
          kind: cisco_xrd
          runtime: docker
      description: Cisco IOS XRv
      external:
        image: none
      features:
        bgp:
          activate_af: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        ospf:
          unnumbered: true
      group_vars:
        ansible_become_method: enable
        ansible_become_password: vagrant
        ansible_connection: network_cli
        ansible_network_os: iosxr
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      ifindex_offset: 0
      interface_name: GigabitEthernet0/0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/iosxr/
        create: virt-install --connect=qemu:///system --network network=vagrant-libvirt,model=e1000
          --name=vm_box --cpu host --arch=x86_64 --vcpus=2 --ram=8192 --virt-type=kvm
          --disk path=vm.qcow2,format=qcow2,device=disk,bus=ide --graphics none --import
        image: cisco/iosxr
      mgmt_if: MgmtEth0/RP0/CPU0/0
    linux:
      clab:
        group_vars:
          ansible_connection: docker
          ansible_user: root
          netlab_linux_distro: vanilla
        image: python:3.9-alpine
        kmods: null
        mtu: 1500
        node:
          config_templates:
            hosts: /etc/hosts
          kind: linux
      description: Generic Linux host
      external:
        image: none
      features:
        dhcp:
          client:
            ipv4: true
            ipv6: true
          relay:
            ipv4: true
          server: true
        lag:
          passive: false
        routing:
          static: true
      graphite:
        icon: server
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: linux
        ansible_python_interpreter: auto_silent
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
        docker_shell: sh -il
        netlab_lldp_enable: false
        netlab_net_tools: false
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        group_vars:
          netlab_linux_distro: ubuntu
        image: generic/ubuntu2004
      mgmt_if: eth0
      role: host
      virtualbox:
        group_vars:
          netlab_linux_distro: ubuntu
        image: generic/ubuntu2004
    none:
      clab:
        image: none
      description: Dummy device used to test topology transformation
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          allowas_in: true
          as_override: true
          bandwidth: true
          bfd: true
          default_originate: true
          gtsm: true
          import:
          - ospf
          - isis
          - ripv2
          - connected
          - vrf
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          multihop:
            vrf: true
          passive: true
          password: true
          remove_private_as: true
          rfc8950: true
          rs: true
          rs_client: true
          tcp_ao:
          - libvirt
          - virtualbox
          - external
          timers: true
          vrf_local_as: true
        dhcp:
          client:
            ipv4: true
            ipv6: true
            routing: true
          relay: true
          server: true
          vrf: true
        eigrp: {}
        evpn:
          asymmetrical_irb: true
          bundle:
          - vlan_aware
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          import:
          - bgp
          - ospf
          - ripv2
          - connected
          - vrf
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
          vrf: true
        lag:
          mlag: true
          passive: true
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          default:
            policy: true
          import:
          - bgp
          - isis
          - ripv2
          - connected
          - vrf
          password: true
          priority: true
          timers: true
          unnumbered: true
        ripv2:
          import:
          - bgp
          - isis
          - ospf
          - connected
          - vrf
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community: true
              locpref: true
              med: true
              prepend: true
              weight: true
          prefix: true
          static:
            inter_vrf: true
            vrf: true
        sr: {}
        srv6: {}
        stp:
          enable_per_port: true
          port_type: true
          supported_protocols:
          - stp
          - rstp
          - mstp
          - pvrst
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: Vlan{vlan}
        vrf:
          bgp: true
          isis: true
          ospfv2: true
          ospfv3: true
          ripng: true
          ripv2: true
        vxlan:
          vtep6: true
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: none
      interface_name: eth{ifindex}
      lag_interface_name: bond{lag.ifindex}
      libvirt:
        image: none
      loopback_interface_name: Loopback{ifindex}
      tunnel_interface_name: Tunnel{ifindex}
      virtualbox:
        image: none
    nxos:
      bfd:
        min_rx: 500
      clab:
        build: https://containerlab.dev/manual/kinds/vr-n9kv/
        group_vars:
          ansible_ssh_pass: admin
          ansible_user: admin
        image: vrnetlab/vr-n9kv:9.3.8
        interface:
          name: eth{ifindex}
        netlab_check_retries: 50
        netlaby_check_delay: 10
        node:
          kind: cisco_n9kv
      description: Cisco Nexus 9300v
      evpn:
        _start_transit_vlan: 3800
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        eigrp: {}
        evpn:
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        ospf:
          password: true
          priority: true
          timers: true
          unnumbered: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{subif_index}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan: {}
      graphite:
        icon: nexus5000
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: nxos
        ansible_ssh_pass: vagrant
        ansible_user: vagrant
      interface_name: Ethernet1/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/nxos/
        create_template: nxos.xml.j2
        image: cisco/nexus9300v
      loopback_interface_name: loopback{ifindex}
      mgmt_if: mgmt0
      virtualbox:
        image: cisco/nexus9300v
    routeros:
      description: Mikrotik RouterOS version 6
      external:
        image: none
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: bridge{vlan}
        vrf:
          bgp: true
          ospfv2: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        build: https://stefano.dscnet.org/a/mikrotik_vagrant/
        image: mikrotik/chr
      mgmt_if: ether1
    routeros7:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-ros/
        image: vrnetlab/vr-routeros:7.6
        interface:
          name: eth{ifindex-1}
        node:
          kind: vr-ros
      description: Mikrotik RouterOS version 7
      external:
        image: none
      features:
        bgp: {}
        mpls:
          ldp: true
          vpn: true
        ospf: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}-{vlan.access_id}'
          svi_interface_name: vlan{vlan}
        vrf:
          bgp: true
          ospfv2: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: network_cli
        ansible_network_os: routeros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_device_type: routeros7
      ifindex_offset: 2
      interface_name: ether{ifindex}
      libvirt:
        build: https://netlab.tools/labs/routeros7/
        create: virt-install --connect=qemu:///system --name=vm_box --arch=x86_64
          --cpu host --vcpus=2 --hvm --ram=256 --network=network:vagrant-libvirt,model=virtio
          --graphics none --import --disk path=vm.qcow2,format=qcow2,bus=ide
        image: mikrotik/chr7
      loopback_interface_name: loopback{ifindex}
      mgmt_if: ether1
    sonic:
      description: Sonic VM
      external:
        image: none
      features:
        bgp:
          activate_af: true
          community:
            2octet:
            - standard
            extended:
            - extended
            large:
            - large
            standard:
            - standard
            - large
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
      graphite:
        icon: router
      group_vars:
        ansible_network_os: frr
        ansible_python_interpreter: auto_silent
        netlab_device_type: sonic
      ifindex_offset: 0
      interface_name: Ethernet{ifindex * 4}
      libvirt:
        create_template: sonic.xml.j2
        group_vars:
          ansible_connection: paramiko
          ansible_ssh_pass: YourPaSsWoRd
          ansible_user: admin
          netlab_show_command:
          - sudo
          - vtysh
          - -c
          - show $@
        image: netlab/sonic
        mtu: 1500
      loopback_interface_name: Loopback{ifindex}
      mgmt_if: eth0
    srlinux:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        group_vars:
          srlinux_grpc_port: 57400
        image: ghcr.io/nokia/srlinux:24.10.1
        interface:
          name: e1-{ifindex}
        node:
          kind: srl
          type: ixrd2
      description: Nokia SR Linux container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          import:
          - ospf
          - isis
          - connected
          - vrf
          - no_policy
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
          max_mtu: 9500
          min_mtu: 1436
          system_mtu: true
        isis:
          import:
          - ospf
          - bgp
          - connected
          - vrf
          - no_policy
          unnumbered:
            ipv4: true
            ipv6: true
            network: true
        mpls:
          ldp: true
        ospf:
          default: true
          import:
          - bgp
          - isis
          - connected
          - vrf
          - no_policy
          unnumbered: true
        routing:
          policy:
            match:
              prefix: true
            set:
            - locpref
            - med
          prefix: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb0.{vlan}
        vrf:
          bgp: true
          isis: true
          keep_module: true
          ospfv2: true
          ospfv3: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: srlinux
        ansible_ssh_pass: NokiaSrl1!
        ansible_user: admin
        netlab_console_connection: ssh
        netlab_match_protomap:
          bgp:
          - bgp
          - bgp-evpn
          connected:
          - local
          isis:
          - isis
          ospf:
          - ospfv2
          - ospfv3
      interface_name: ethernet-1/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: mgmt0
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    sros:
      bfd:
        min_rx: 100
        min_tx: 100
      clab:
        build: https://containerlab.dev/manual/kinds/vr-sros/
        group_vars:
          sros_grpc_port: 57400
        image: vrnetlab/vr-sros
        interface:
          name: eth{ifindex}
        mtu: 1500
        node:
          kind: vr-sros
          license: /Projects/SR_OS_VSR-SIM_license.txt
          type: sr-1
      description: Nokia SR OS container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          ipv6_lla: true
          local_as: true
          local_as_ibgp: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - anycast
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
            network: false
        mpls:
          6pe: true
          bgp: true
          ldp: true
          vpn: true
        ospf:
          strict_bfd: true
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        routing:
          policy:
            set:
            - locpref
            - med
        sr: {}
        srv6: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}/1:{vlan.access_id}'
          svi_interface_name: svi.{vlan}
        vrf:
          bgp: true
          ospfv2: true
        vxlan:
          requires:
          - evpn
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko_ssh
        ansible_network_os: sros
        ansible_ssh_pass: admin
        ansible_user: admin
        netlab_console_connection: ssh
        sros_use_openconfig: false
      interface_name: 1/1/c{ifindex}
      loopback_interface_name: loopback.{ifindex}
      mgmt_if: A/1
      sr:
        ipv6_sid_offset: 100
        srgb_range_size: 1000
        srgb_range_start: 500000
    unknown:
      description: Generic Unknown Device
      features:
        bfd: {}
        bgp: {}
        evpn: {}
        gateway: {}
        isis: {}
        mpls: {}
        ospf: {}
        sr: {}
        srv6: {}
        vlan: {}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan: {}
      graphite:
        icon: server
      interface_name: eth{ifindex}
      mgmt_if: eth0
    vjunos-router:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosrouter/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 60
        image: vrnetlab/juniper_vjunos-router:23.4R2-S2.1
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosrouter
      description: vJunos Router (similar to vMX)
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: admin@123
        ansible_user: admin
        netlab_check_retries: 20
        netlab_console_connection: ssh
        netlab_device_type: vjunos-router
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vjunos-switch:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosswitch/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 40
        image: vrnetlab/juniper_vjunos-switch:23.4R2-S2.1
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosswitch
      description: vJunos Switch
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: switch
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vjunos-switch
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vmx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vmx/
        image: vrnetlab/vr-vmx:18.2R1.9
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vmx
      description: Juniper vMX container
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: true
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: admin@123
        ansible_user: admin
        netlab_check_retries: 20
        netlab_console_connection: ssh
        netlab_device_type: vmx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
    vptx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vjunosevolved/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 40
        image: vrnetlab/juniper_vjunosevolved:23.4R2-S2.1
        interface:
          name: eth{ifindex+1}
        mtu: 1500
        node:
          kind: juniper_vjunosevolved
      description: Juniper vPTX
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: irb.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: switch
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vptx
      ifindex_offset: 0
      interface_name: et-0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/vptx/
        create_template: vptx.xml.j2
        image: juniper/vptx
        pre_install: vptx
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: re0:mgmt-0
    vsrx:
      clab:
        build: https://containerlab.dev/manual/kinds/vr-vsrx/
        group_vars:
          ansible_ssh_pass: admin@123
          ansible_user: admin
          netlab_check_delay: 10
          netlab_check_retries: 60
        image: vrnetlab/vr-vsrx:23.1R1.8
        interface:
          name: eth{ifindex+1}
        node:
          kind: vr-vsrx
      description: Juniper vSRX 3.0
      external:
        image: none
      features:
        bfd: {}
        bgp: {}
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis:
          unnumbered:
            ipv4: true
            ipv6: true
        mpls:
          ldp: true
          vpn: true
        ospf:
          unnumbered: true
        sr: {}
        vlan:
          mixed_trunk: false
          model: router
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
      graphite:
        icon: firewall
      group_vars:
        ansible_connection: netconf
        ansible_network_os: junos
        ansible_ssh_pass: Vagrant
        ansible_user: vagrant
        netlab_console_connection: ssh
        netlab_device_type: vsrx
      ifindex_offset: 0
      interface_name: ge-0/0/{ifindex}
      libvirt:
        build: https://netlab.tools/labs/vsrx/
        create: virt-install --connect=qemu:///system --name=vm_box --os-variant=freebsd10.0
          --arch=x86_64 --cpu host --vcpus=2 --hvm --ram=4096 --disk path=vm.qcow2,bus=ide,format=qcow2
          --disk path=bootstrap.iso,device=cdrom,bus=ide --boot hd --network=network:vagrant-libvirt,model=virtio
          --graphics none --import
        create_iso: vsrx
        image: juniper/vsrx3
      loopback_interface_name: lo0.{ifindex}
      mgmt_if: fxp0
      virtualbox:
        image: juniper/vsrx3
    vyos:
      clab:
        features:
          stub_loopback: true
        group_vars:
          ansible_connection: docker
          ansible_user: vyos
        image: ghcr.io/sysoleg/vyos-container
        kmods: null
        mtu: 1500
        node:
          binds:
            /lib/modules: /lib/modules
          kind: linux
      description: VyOS VM/container
      external:
        image: none
      features:
        bfd: {}
        bgp:
          activate_af: true
          import:
          - ospf
          - ripv2
          - connected
          - vrf
          ipv6_lla: true
          local_as: true
          vrf_local_as: true
        evpn:
          asymmetrical_irb: true
          irb: true
        gateway:
          protocol:
          - vrrp
        initial:
          ipv4:
            unnumbered: true
          ipv6:
            lla: true
        isis: {}
        mpls:
          ldp: true
          vpn:
            ipv4: true
        ospf:
          default: true
          import:
          - bgp
          - ripv2
          - connected
          - vrf
          unnumbered: true
        ripv2:
          ipv4: true
          ipv6: true
          passive: true
        routing:
          aspath: true
          community:
            expanded: true
          policy:
            match:
            - prefix
            - nexthop
            - aspath
            - community
            set:
              community:
                append: true
                delete: false
                extended: true
                large: true
                standard: true
              locpref: true
              med: true
              prepend: true
          prefix: true
        vlan:
          model: l3-switch
          native_routed: true
          subif_name: '{ifname}.{vlan.access_id}'
          svi_interface_name: br0.{vlan}
        vrf:
          bgp: true
          ospfv2: true
          ospfv3: true
        vxlan:
          vtep6: true
      graphite:
        icon: router
      group_vars:
        ansible_connection: paramiko
        ansible_network_os: vyos
        ansible_ssh_pass: vyos
        ansible_user: vyos
        docker_shell: su - vyos
      interface_name: eth{ifindex}
      libvirt:
        image: vyos/current
      loopback_interface_name: dum{ifindex}
      mgmt_if: eth0
  dhcp:
    attributes:
      interface:
        client:
          default: bool
          ipv4: bool
          ipv6: bool
        server:
          _subtype: node_id
          type: list
        vrf: str
      link:
        client:
          default: bool
          ipv4: bool
          ipv6: bool
        subnet:
          ipv4: bool
          ipv6: bool
      node:
        server: bool
        vrf: bool
    config_after:
    - vlan
    - vrf
    - vxlan
    features:
      ipv4: IPv4 DHCP client
      ipv6: IPv6 DHCP client
      relay: DHCP relay (IPv4 and IPv6)
      server: DHCP server
      vrf: Inter-VRF DHCP relay
    supported_on:
    - cat8000v
    - csr
    - cumulus
    - dnsmasq
    - eos
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - linux
    - none
    transform_after:
    - vlan
    - vrf
    - ospf
    - eigrp
    - isis
    - bgp
  eigrp:
    as: 1
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
      link:
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        as: asn
    config_after:
    - vlan
    - dhcp
    - routing
    supported_on:
    - cat8000v
    - csr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - none
    - nxos
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  evpn:
    attributes:
      bundle:
      - vlan_aware
      - vlan
      - port
      - port_vlan
      global:
        as: asn
        session:
        - ibgp
        - ebgp
        start_transit_vni:
          max_value: 16777215
          min_value: 1
          type: int
        transport:
          type: str
          valid_values:
          - evpn
          - mpls
        vlans: list
        vrfs: list
      node:
        session:
        - ibgp
        - ebgp
        vlans: list
        vrfs: list
      vlan:
        evi: rd
        export: list
        import: list
        rd: rd
      vrf:
        bundle:
          type: str
          valid_values:
          - vlan_aware
          - vlan
          - port
          - port_vlan
        transit_vni:
          _alt_types:
          - str
          - bool
          max_value: 16777215
          min_value: 1
          type: int
    config_after:
    - vlan
    - vxlan
    - vrf
    features:
      asymmetrical_irb: Support asymmetrical IRB (routing on ingress, bridging on
        egress)
      bundle: EVPN bundle service support
      irb: Supports symmetrical IRB (routing on ingress and egress)
    no_propagate:
    - start_transit_vni
    - transport
    - vlan_bundle_service
    - as
    requires:
    - bgp
    session:
    - ibgp
    start_transit_vni: 200000
    supported_on:
    - arubacx
    - cumulus
    - dellos10
    - eos
    - frr
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vyos
    transform_after:
    - vlan
    - vxlan
    - vrf
  gateway:
    anycast:
      mac: 0200.cafe.00ff
      unicast: true
    attributes:
      anycast:
      - unicast
      - mac
      can_be_true:
      - link
      global:
        anycast:
          mac: mac
          unicast: bool
        id: int
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
        vrrp:
          group: int
          preempt: bool
          priority: int
      link:
        anycast:
          mac: mac
          unicast: bool
        id: int
        ipv4:
          type: ipv4
          use: interface
        ipv6:
          type: ipv6
          use: interface
        protocol:
          type: str
          valid_values:
          - anycast
          - vrrp
        vrrp:
          group: int
          preempt: bool
          priority: int
      link_to_neighbor: true
      node:
        anycast:
          mac: mac
          unicast: bool
        protocol: null
        vrrp:
          group: int
          preempt: bool
          priority: int
      protocols:
      - anycast
      - vrrp
      vrrp:
      - group
    config_after:
    - vlan
    - vrf
    features:
      protocol: Supported FHRP protocols
    id: -2
    no_propagate:
    - id
    - protocol
    protocol: anycast
    supported_on:
    - arubacx
    - cat8000v
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - junos
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - vrf
    - ospf
    - isis
    - eigrp
    vrrp:
      group: 1
  hints:
    cli:
      interrupt: Use 'netlab status' command to display the status of your lab and
        'netlab down --cleanup' command to clean it up. You might have to use the
        '--force' option of the 'netlab down' command.
      recreate: netlab transforms lab topology into device- and platform data and
        stores the results in a snapshot file that is used by most netlab commands.
        Changes to source files (including lab topology or defaults) are not automatically
        reflected in the snapshot file. Use 'netlab create' or 'netlab up' to create
        a new snapshot file.
    evpn:
      asn: 'You could use the global ''bgp.as'' parameter to specify the AS to use
        in EVPN route targets. ''bgp.as'' specified on individual nodes or groups
        will not work. You can also specify the global AS used by EVPN in ''vrf.as''
        parameter if you use VRFs, or in ''evpn.as'' parameter if you use EVPN in
        bridging-only scenarios.

        '
      irb_group: 'All VLANs that are part of a VRF using asymmetric IRB have to be
        present on all nodes using that VRF. The easiest way to achieve that is to
        create a group with all participating nodes and list VLANs in the ''vlans''
        attribute of that group

        '
      node_attr: 'evpn.bundle and evpn.transit_vni attributes can be used only in
        global VRF definition

        '
    libvirt:
      capture: 'Change the link type to Linux bridge with ''type: lan'' link attribute
        or see

        https://netlab.tools/labs/libvirt/#libvirt-capture for other options.

        '
    nodes:
      unmanaged_device: Netlab uses the node device type for unmanaged nodes to figure
        out what features the node supports. If you're using a device that is not
        supported by netlab, set the device type to 'none'.
    quirks:
      junos_lb: 'Junos devices cannot have more than one loopback interface per routing
        instance

        '
    report:
      source: 'A report can be specified in a file with .j2 suffix within ''reports''
        subdirectory in package-, system-, user- or current directory. You can also
        specify a report in a defaults.outputs.report setting.

        '
    routing:
      policy:
        match_af: A routing policy 'match.prefix' condition can match a single address
          family. Use 'match.af' parameter to specify the address family you want
          to match.
    validation:
      nodes: A test that uses 'show', 'exec' or 'plugin' action must specify the nodes
        on which that action will be executed.
      show: The 'show' action should return structured data that is then validated
        with the 'valid' check. If you want to execute a command on the device without
        checking the results, use the 'exec' action.
      valid: A test that includes the 'valid' check must generate some output to check.
        That output can be generated with 'show','exec', or 'suzieq' action.
    vlan:
      mixed_fwd_check: 'You can disable this error with "defaults.vlan.warnings.mixed_fwd_check:
        False", but then you might get the same IP prefix assigned to multiple segments
        of the routed VLAN.

        '
    vrf:
      inactive: 'A globally-defined VRF is not used on a node unless that node is
        attached to a VRF link, or has the VRF listed in the node ''vrfs'' dictionary
        and uses VRF loopbacks.

        '
  initial:
    features:
      ipv4:
        unnumbered: Unnumbered IPv4 interfaces
      ipv6:
        lla: IPv6 LLA-only interfaces
      system_mtu: System-wide MTU setting
  isis:
    area: '49.0001'
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        instance: str
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      link:
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        cost:
          max_value: 16777215
          min_value: 1
          type: int
        metric:
          max_value: 16777215
          min_value: 1
          type: int
        network_type:
          _alt_types:
          - bool
          type: str
          valid_values:
          - point-to-point
        passive: bool
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area: net
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        import: _r_import
        instance: str
        net: net
        type:
          type: str
          valid_values:
          - level-1
          - level-2
          - level-1-2
    config_after:
    - vlan
    - dhcp
    - routing
    features:
      unnumbered:
        ipv4: IPv4 unnumbered interfaces
        ipv6: IPv6 unnumbered interfaces
        network: multi-access unnumbered links
    instance: Gandalf
    supported_on:
    - asav
    - cat8000v
    - csr
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - iosxr
    - junos
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - vrf
    type: level-2
    warnings:
      inactive: true
  lag:
    attributes:
      global:
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
      lag_l2_linkattr:
        bandwidth: null
        mtu: null
      lag_member_linkattr:
        _linkname: null
        bandwidth: null
        interfaces: null
        mtu: null
      lag_no_propagate:
        _linkname: null
        interfaces: null
        name: null
      link:
        ifindex:
          max_value: 10000
          min_value: 0
          type: int
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        members: null
        mlag:
          mac: mac
          peergroup:
            _alt_types:
            - bool
            min_value: 1
            type: int
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
      node:
        lacp:
          type: str
          valid_values:
          - 'off'
          - slow
          - fast
        lacp_mode:
          type: str
          valid_values:
          - passive
          - active
        mlag:
          mac: mac
        mode:
          type: str
          valid_values:
          - 802.3ad
          - balance-xor
    lacp: fast
    lacp_mode: active
    no_propagate:
    - start_lag_id
    start_lag_id: 1
    supported_on:
    - arubacx
    - bird
    - cumulus
    - cumulus_nvue
    - dellos10
    - dnsmasq
    - eos
    - frr
    - linux
    - none
  module:
  - ospf
  mpls:
    attributes:
      global:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
      link:
        ldp: bool
      node:
        6pe:
          true_value:
          - ibgp
          type: list
        bgp:
          _alt_types:
          - bool
          - BoxList
          disable_unlabeled: bool
          explicit_null: bool
          ipv4:
            true_value:
            - ibgp
            - ebgp
            type: list
          ipv6:
            true_value:
            - ibgp
            - ebgp
            type: list
        ldp:
          _alt_types:
          - bool
          advertise: list
          explicit_null: bool
          igp_sync: bool
          router_id:
            type: ipv4
            use: id
        vpn:
          _alt_types:
          - bool
          - BoxList
          ipv4:
            true_value:
            - ibgp
            type: list
          ipv6:
            true_value:
            - ibgp
            type: list
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    features:
      6pe: Supports 6PE
      bgp: Supports BGP Labeled Unicast address family
      ldp: Can run LDP within an autonomous system
      vpn: Supports MPLS/VPN
    ldp: true
    supported_on:
    - arubacx
    - cat8000v
    - csr
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - junos
    - none
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - bgp
    - vrf
  multilab:
    change:
      addressing:
        mgmt:
          _bridge: nl_mgmt_{id}
          _network: nl_mgmt_{id}
          ipv4: 192.168.{id}.0/24
      defaults:
        name: ml_{id}
        providers:
          libvirt:
            tunnel_id: '{id}'
            vifprefix: vgif_{id}
      name: ml_{id}
  name: ospf_4nodes_
  netlab:
    capture:
      command: tcpdump -i {intf}
      command_args: -l -v
  ospf:
    area: 0.0.0.0
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
            max_value: 600
            min_value: 0
            type: int
        passive: bool
        password: str
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      interface:
        priority:
          max_value: 255
          min_value: 0
          type: int
      intf_optional:
      - timers
      - priority
      - password
      - digest
      intf_to_neighbor: false
      link:
        area:
          type: ipv4
          use: id
        bfd: bool
        cost:
          max_value: 65534
          min_value: 1
          type: int
        digest:
          type: dict
        network_type:
          type: str
          valid_values:
          - point-to-point
          - point-to-multipoint
          - broadcast
          - non-broadcast
        passive: bool
        password: str
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        area:
          type: ipv4
          use: id
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
          strict: bool
          strict_delay:
            max_value: 600
            min_value: 0
            type: int
        default:
          _alt_types:
          - bool
          _keys:
            always: bool
            cost: int
            policy: id
            type:
              type: str
              valid_values:
              - e1
              - e2
          type: dict
        digest:
          type: dict
        import: _r_import
        passive: bool
        password: str
        priority:
          max_value: 255
          min_value: 0
          type: int
        process:
          min_value: 1
          type: int
        reference_bandwidth:
          min_value: 1
          type: int
        router_id:
          type: ipv4
          use: id
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      node_copy:
      - area
      - passive
      - digest
      - password
      - priority
      - timers
      vrf:
        active: bool
        area:
          type: ipv4
          use: id
        default:
          _alt_types:
          - bool
          _keys:
            always: bool
            cost: int
            policy: id
            type:
              type: str
              valid_values:
              - e1
              - e2
          type: dict
        digest:
          type: dict
        import: _r_import
        passive: bool
        password: str
        router_id:
          type: ipv4
          use: id
        timers:
          dead:
            max_value: 8192
            min_value: 3
            type: int
          hello:
            max_value: 8192
            min_value: 1
            type: int
      vrf_aware:
      - area
      vrf_copy:
      - area
      - router_id
      - reference_bandwidth
    config_after:
    - vlan
    - dhcp
    - routing
    features:
      default: Originate external default route
      digest: MD5 authentication
      import: Import routes from other routing protocols
      password: Cleartext authentication
      priority: Router priority
      strict_bfd: Supports strict BFD mode (RFC 9355)
      timers: Supports OSPF interface timers
      unnumbered: Can run OSPFv2 over unnumbered IPv4 interfaces
    supported_on:
    - arubacx
    - bird
    - cat8000v
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - fortios
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - iosxr
    - junos
    - none
    - nxos
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - vrf
    warnings:
      inactive: true
  outputs:
    d2:
      as_clusters: true
      ebgp:
        source-arrowhead:
          shape: arrow
        style:
          stroke: '#b21a1a'
          stroke-width: 4
        target-arrowhead:
          shape: arrow
      ibgp:
        source-arrowhead:
          shape: arrow
        style:
          stroke: '#613913'
          stroke-width: 4
        target-arrowhead:
          shape: arrow
      interface_labels: false
      lan:
        shape: rectangle
        style:
          border-radius: 8
          font-size: 20
      node_address_label: true
      router:
        shape: oval
        style:
          font-size: 20
      rr_sessions: true
      switch:
        shape: hexagon
        style:
          font-size: 20
    graph:
      as_clusters: true
      colors:
        as: '#e8e8e8'
        ebgp: '#b21a1a'
        ibgp: '#613913'
        node: '#ff9f01'
        stub: '#d1bfab'
      interface_labels: false
      margins:
        as: 16
      node_address_label: true
    provider: {}
    yaml=netlab:
      snapshot:
        yml: {}
  paths:
    collect:
      dirs:
      - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/ansible/tasks/fetch-config
    custom:
      dirs:
      - /home/pouchou/Nextcloud/logiciels/netlab-ospf-jmp/ospf-4nodes-frr
      - /home/pouchou/.netlab
      - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/extra
      files:
      - '{{ custom_config + ''/'' + inventory_hostname + ''.'' + netlab_device_type
        + ''-'' + node_provider + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.'' + netlab_device_type
        + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.j2'' }}'
      - '{{ custom_config + ''/'' + inventory_hostname + ''.cfg'' }}'
      - '{{ custom_config + ''/'' + netlab_device_type + ''-'' + node_provider + ''.j2''
        }}'
      - '{{ custom_config + ''/'' + netlab_device_type + ''.j2'' }}'
      - '{{ custom_config + ''/'' + ansible_network_os + ''-'' + node_provider + ''.j2''
        }}'
      - '{{ custom_config + ''/'' + ansible_network_os + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.'' + netlab_device_type
        + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.'' + ansible_network_os
        + ''.j2'' }}'
      - '{{ custom_config + ''.'' + inventory_hostname + ''.j2'' }}'
      - '{{ custom_config + ''.'' + netlab_device_type + ''.j2'' }}'
      - '{{ custom_config + ''.'' + ansible_network_os + ''.j2'' }}'
      - '{{ custom_config }}'
      - '{{ custom_config + ''.j2'' }}'
      tasks:
      - '{{ custom_config }}/deploy-{{ inventory_hostname }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ netlab_device_type }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}-{{ node_provider }}.yml'
      - '{{ custom_config }}/deploy.{{ ansible_network_os }}.yml'
      - '{{ custom_config }}/deploy.yml'
    deploy:
      dirs:
      - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/ansible/tasks
      files:
      - '{{ netlab_device_type }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ netlab_device_type }}/{{ config_module }}.yml'
      - deploy-config/{{ netlab_device_type }}-{{ provider|default(netlab_provider)
        }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - '{{ ansible_network_os }}/{{ config_module }}-{{ provider|default(netlab_provider)
        }}.yml'
      - '{{ ansible_network_os }}/{{ config_module }}.yml'
      - deploy-config/{{ ansible_network_os }}-{{ provider|default(netlab_provider)
        }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
      tasks_generic:
      - deploy-config/{{ netlab_device_type }}-{{ node_provider }}.yml
      - deploy-config/{{ netlab_device_type }}.yml
      - deploy-config/{{ ansible_network_os }}-{{ node_provider }}.yml
      - deploy-config/{{ ansible_network_os }}.yml
    plugin:
    - /home/pouchou/Nextcloud/logiciels/netlab-ospf-jmp/ospf-4nodes-frr
    - /home/pouchou/.netlab
    - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/extra
    ready:
      dirs:
      - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/ansible/tasks/readiness-check
      files:
      - '{{netlab_device_type}}-{{provider|default(netlab_provider)}}.yml'
      - '{{netlab_device_type}}.yml'
      - '{{ansible_network_os}}-{{provider|default(netlab_provider)}}.yml'
      - '{{ansible_network_os}}.yml'
    t_files:
      files:
      - '{{config_module}}/{{netlab_device_type}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{netlab_device_type}}.j2'
      - '{{config_module}}.{{netlab_device_type}}.j2'
      - '{{config_module}}/{{ansible_network_os}}-{{provider|default(netlab_provider)}}.j2'
      - '{{config_module}}/{{ansible_network_os}}.j2'
      - '{{config_module}}.{{ansible_network_os}}.j2'
      - '{{netlab_device_type}}/{{config_module}}.j2'
    templates:
      dirs:
      - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/ansible/templates
      - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/daemons
    validate:
    - /home/pouchou/.pyenv/versions/3.11.3/envs/netlab/lib/python3.11/site-packages/netsim/validate
  plugin: []
  ports:
    http: 80
    https: 443
    netconf: 830
    ssh: 22
  prefix:
    any:
      ipv4: 0.0.0.0/0
      ipv6: ::/0
  provider: clab
  providers:
    clab:
      act_probe: docker ps
      act_title: Running containers
      attributes:
        interface:
          name: str
        link:
          uplink: str
        node:
          _keys:
            binds: null
            cmd: str
            config_templates: null
            dns: null
            env: null
            image: str
            kind: str
            license: str
            ports: list
            runtime: str
            srl-agents: null
            startup-config: str
            startup-delay: int
            type: str
          type: dict
      bridge_type: bridge
      cleanup:
      - clab.yml
      - clab_files
      config: clab.yml
      description: containerlab with Docker
      kmods:
        lag:
        - bonding
        mpls:
        - mpls-router
        - mpls-iptunnel
        sr:
        - mpls-router
        - mpls-iptunnel
        vrf:
        - vrf
        vxlan:
        - vxlan
        - udp_tunnel
        - ip6_udp_tunnel
      lab_prefix: clab
      node_config_attributes:
      - type
      - cmd
      - dns
      - env
      - license
      - ports
      - startup-delay
      - restart-policy
      probe:
      - cmd: containerlab version
        err: Containerlab is not installed
      - cmd:
        - bash
        - -c
        - '[[ `containerlab version|awk ''/version/ {print $2}''` > ''0.62.1'' ]]
          && echo OK'
        err: Containerlab version is too old, please upgrade to 0.62.2 or later with
          'sudo containerlab version upgrade'
      runtime: docker
      start: sudo -E containerlab deploy --reconfigure -t clab.yml
      stop: sudo -E containerlab destroy --cleanup -t clab.yml
      template: clab.j2
    external:
      cleanup:
      - external.txt
      config: external.txt
      description: External devices
      probe: []
      start: []
      stop: []
      template: external.j2
    libvirt:
      act_probe: virsh list
      act_title: KVM/libvirt domains (virtual machines)
      attributes:
        global:
          providers: null
        link:
          permanent: bool
          provider: dict
          public:
            true_value: bridge
            type: str
            valid_values:
            - bridge
            - vepa
            - passthrough
            - private
          uplink: str
        node:
          image: str
          nic_adapter_count: int
          nic_model_type: str
          uuid: str
      clab:
        filename: clab-augment.yml
        recreate_config: true
        start: sudo -E containerlab deploy --reconfigure -t clab-augment.yml
        stop: sudo -E containerlab destroy --cleanup -t clab-augment.yml
      cleanup:
      - Vagrantfile
      config: Vagrantfile
      description: Vagrant with libvirt/KVM
      probe:
      - cmd: stat /usr/sbin/kvm-ok
        err: KVM is not installed or does not include kvm-ok utility
      - cmd: /usr/sbin/kvm-ok
        err: KVM is not enabled or not working properly
      - cmd: which virsh
        err: libvirt is not installed
      - cmd: which vagrant
        err: vagrant is not installed
      - cmd:
        - bash
        - -c
        - vagrant plugin list|grep vagrant-libvirt
        err: vagrant-libvirt plugin is not installed
      - cmd: virsh net-list
        err: You don't have access to virsh networking, your user should be in libvirt
          group
      start: vagrant up --provider libvirt
      stop: vagrant destroy -f
      tunnel_id: 1
      vifprefix: vgif
    virtualbox:
      cleanup:
      - Vagrantfile
      config: Vagrantfile
      description: Vagrant with Virtualbox
      forwarded:
        http: 8000
        netconf: 3000
        ssh: 2000
      inventory:
        ansible_host: 127.0.0.1
      inventory_port_map:
        ssh: ansible_port
      probe:
      - VBoxManage -h
      - vagrant plugin list
      start: vagrant up --provider virtualbox
      stop: vagrant destroy -f
  ripv2:
    attributes:
      global:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        bfd:
          _alt_types:
          - bool
          ipv4: bool
          ipv6: bool
        timers:
          garbage:
            max_value: 600
            min_value: 5
            type: int
          timeout:
            max_value: 3600
            min_value: 5
            type: int
          update:
            max_value: 60
            min_value: 5
            type: int
        version:
          max_value: 2
          min_value: 2
          type: int
      link:
        passive: bool
      node:
        af:
          _alt_types:
          - NoneType
          _list_to_dict: true
          ipv4: bool
          ipv6: bool
        import: _r_import
        timers:
          garbage:
            max_value: 600
            min_value: 5
            type: int
          timeout:
            max_value: 3600
            min_value: 5
            type: int
          update:
            max_value: 60
            min_value: 5
            type: int
        version:
          max_value: 2
          min_value: 2
          type: int
      vrf:
        active: bool
        timers:
          garbage:
            max_value: 600
            min_value: 5
            type: int
          timeout:
            max_value: 3600
            min_value: 5
            type: int
          update:
            max_value: 60
            min_value: 5
            type: int
      vrf_copy:
      - timers
    config_after:
    - vlan
    - dhcp
    - routing
    features:
      ipv4: RIPv2
      ipv6: RIPng
      passive: Passive interfaces
    supported_on:
    - cat8000v
    - csr
    - cumulus
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - none
    - sros
    - vyos
    transform_after:
    - vlan
    - vrf
    version: 2
    warnings:
      inactive: true
  routing:
    attributes:
      global:
        aspath:
          _keytype: id
          _subtype:
            _subtype: aspath_entry
            make_list: true
            type: list
          type: dict
        community:
          _keytype: id
          _subtype:
            _subtype: community_entry
            make_list: true
            type: list
          type: dict
        policy:
          _keytype: id
          _subtype:
            _subtype: rp_entry
            make_list: true
            type: list
          type: dict
        prefix:
          _keytype: id
          _subtype:
            _subtype: pfx_entry
            make_list: true
            type: list
          type: dict
        static:
          _keytype: id
          _subtype:
            _subtype: static_entry
            make_list: true
            type: list
          type: dict
      node:
        aspath:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: aspath_entry
            make_list: true
            type: list
          type: dict
        community:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: community_entry
            make_list: true
            type: list
          type: dict
        policy:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: rp_entry
            make_list: true
            type: list
          type: dict
        prefix:
          _keytype: id
          _subtype:
            _alt_types:
            - NoneType
            _subtype: pfx_entry
            make_list: true
            type: list
          type: dict
        static:
          _subtype: static_entry
          type: list
      route_map:
        match:
        - prefix
        - nexthop
        - aspath
        set:
        - locpref
        - med
        - weight
        - prepend
    features:
      policy:
        match: Route map MATCH attributes
        set: Route map SET attributes
    no_propagate:
      aspath: null
      community: null
      policy: null
      prefix: null
      routes: null
    supported_on:
    - arubacx
    - bird
    - cat8000v
    - csr
    - cumulus
    - dnsmasq
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - linux
    - none
    - srlinux
    - sros
    - vyos
  sources:
    extra: []
    list: []
    system: []
    user: []
  sr:
    attributes:
      global:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
      node:
        ipv6_sid_offset:
          min_value: 1
          type: int
        srgb_range_size:
          min_value: 1
          type: int
        srgb_range_start:
          min_value: 1
          type: int
    requires:
    - isis
    supported_on:
    - cat8000v
    - csr
    - eos
    - frr
    - iol
    - ioll2
    - junos
    - none
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    transform_after:
    - vlan
  srv6:
    address_families:
    - ipv4
    - ipv6
    attributes:
      global:
        address_families:
          true_value:
          - ipv4
          - ipv6
          type: list
        bgp: bool
        isis: bool
        locator: str
      node:
        address_families:
          true_value:
          - ipv4
          - ipv6
          type: list
        bgp: bool
        isis: bool
        locator: str
        transit_only: bool
    bgp: false
    isis: true
    locator: 2001:db8:aaaa
    requires:
    - isis
    supported_on:
    - none
    - sros
    - unknown
    transform_after:
    - vlan
  stp:
    attributes:
      global:
        enable: bool
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
        protocol:
          type: str
          valid_values:
          - stp
          - rstp
          - mstp
          - pvrst
        stub_port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
          - none
      interface:
        enable: bool
        port_priority:
          max_value: 15
          min_value: 0
          type: int
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
      intf_to_neighbor: false
      link:
        enable: bool
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
      node:
        enable: bool
        port_type:
          type: str
          valid_values:
          - normal
          - edge
          - network
          - auto
        priority:
          max_value: 61440
          min_value: 0
          type: int
        protocol:
          type: str
          valid_values:
          - stp
          - rstp
          - mstp
          - pvrst
    config_after:
    - vlan
    enable: true
    features:
      enable_per_port: Whether the device supports port level granularity for enable/disable
      supported_protocols: Subset of supported STP variants
    no_propagate:
    - stub_port_type
    protocol: stp
    requires:
    - vlan
    stub_port_type: none
    supported_on:
    - arubacx
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - none
    transform_after:
    - vlan
  tools:
    edgeshark:
      docker:
        down:
        - docker rm -f edgeshark
        - docker rm -f gostwire
        - docker network inspect "ghost-in-da-edge" >/dev/null 2>&1 && docker network
          rm "ghost-in-da-edge"
        message: Open http://{sys.ipaddr}:5001 in your browser
        up:
        - docker network inspect "ghost-in-da-edge" >/dev/null 2>&1 || docker network
          create "ghost-in-da-edge"
        - 'docker run -d --name gostwire --restart "unless-stopped" --pull "always"
          --read-only --user 65534 --cap-drop ALL --cap-add SYS_ADMIN --cap-add SYS_CHROOT
          --cap-add SYS_PTRACE --cap-add DAC_READ_SEARCH --cap-add DAC_OVERRIDE --cap-add
          NET_RAW --cap-add NET_ADMIN --security-opt "apparmor:unconfined" --pid "host"
          --network "ghost-in-da-edge" --label "com.docker.compose.project=edgeshark"
          --entrypoint "/gostwire" ghcr.io/siemens/ghostwire "--http=[::]:5000" "--initialcgroup"
          "--brand=Edgeshark"

          - docker run -d --name edgeshark --publish "5001:5001" --restart "unless-stopped"
          --pull "always" --read-only --user 65534 --cap-drop ALL --cap-add SYS_ADMIN
          --cap-add SYS_CHROOT --cap-add SYS_PTRACE --cap-add NET_RAW --cap-add NET_ADMIN
          --security-opt "apparmor:unconfined" --pid "host" --network "ghost-in-da-edge"
          --label "com.docker.compose.project=edgeshark" --entrypoint "/packetflix"
          ghcr.io/siemens/packetflix "--port=5001" "--discovery-service=gostwire.ghost-in-da-edge"
          "--gw-port=5000" "--proxy-discovery"'
      runtime: docker
    graphite:
      attributes:
        node:
          icon: str
      config:
      - dest: graphite-default.json
        render: graphite
      docker:
        down: docker kill '{name}_graphite'
        message: Open http://{sys.ipaddr}:{ 8080 + defaults.multilab.id if defaults.multilab.id
          else 8080 }/graphite/ in your browser
        up: docker run -d --rm {sys.docker_net} --mount type=bind,source="$(pwd)/graphite/graphite-default.json",target=/htdocs/default/default.json,readonly
          -p { 8080 + defaults.multilab.id if defaults.multilab.id else 8080 }:80
          --name '{name}_graphite' netreplica/graphite:0.4.2
      runtime: docker
    nso:
      docker:
        cleanup: docker volume rm '{name}-nso-vol' docker volume rm '{name}-nso-log-vol'
        connect: docker exec -it '{name}-cisco-nso' bash
        down: docker kill {name}-cisco-nso
        message: Open http://{sys.ipaddr}:{ 8888 + defaults.multilab.id if defaults.multilab.id
          else 8888 } in your browser Use admin/admin for login Use 'netlab connect
          nso' to start nso CLI and type ncs_cli -C -u admin to acces cisco CLI
        up: docker run --rm -itd --name {name}-cisco-nso {sys.docker_net} -v {name}-nso-vol:/nso
          -v {name}-nso-log-vol:/log -p { 8888 + defaults.multilab.id if defaults.multilab.id
          else 8888 }:8080 -e ADMIN_USERNAME=admin -e ADMIN_PASSWORD=admin -e EXTRA_ARGS='--with-package-reload
          --ignore-initial-validation' cisco-nso-prod; docker exec -it {name}-cisco-nso
          sed -i.original -e "/<webui>/,/<\\/webui>/ {{ /<transport>/,/<\\/transport>/
          {{ /<tcp>/,/<\\/tcp>/ {{ /<enabled>/ s/false/true/ }} }} }}" /etc/ncs/ncs.conf;
          docker exec -it {name}-cisco-nso sed -i.backup -e "/<local-authentication>/{{n;s|<enabled>false</enabled>|<enabled>true</enabled>|}}"
          /etc/ncs/ncs.conf; docker exec -it {name}-cisco-nso sed -i.backup -e "/<webui>/a
          <package-upload> <enabled>true</enabled> </package-upload>" /etc/ncs/ncs.conf;
      runtime: docker
    suzieq:
      config:
      - dest: suzieq-inventory.yml
        template: suzieq.inventory.j2
      - dest: suzieq-cfg.yml
        template: suzieq-cfg.yml
      docker:
        cleanup: docker volume rm '{name}_suzieq'
        connect: docker exec -it '{name}_suzieq' /usr/local/bin/suzieq-cli
        down: docker kill '{name}_suzieq'
        message: Use 'netlab connect suzieq' to start SuzieQ CLI
        up: docker run --rm -itd --name '{name}_suzieq' {sys.docker_net} -v '{name}_suzieq':/parquet
          -v './suzieq':/suzieq netenglabs/suzieq-demo -c 'sq-poller -I /suzieq/suzieq-inventory.yml'
      runtime: docker
  vlan:
    attributes:
      copy_vlan_to_intf:
        gateway: null
        ipv4: null
        ipv6: null
      global:
        mode:
          type: str
          valid_values:
          - bridge
          - irb
          - route
      keep_subif:
        ifindex: null
        ifname: null
        type: null
        virtual_interface: null
        vlan: null
      link:
        access: id
        mode:
          type: str
          valid_values:
          - route
        native: id
        trunk: null
      node:
        mode: null
      phy_ifattr:
        _selfloop_ifindex: null
        bandwidth: null
        bridge: null
        ifindex: null
        ifname: null
        lag: null
        linkindex: null
        mtu: null
        parentindex: null
        stp: null
        type: null
        virtual_interface: null
        vlan: null
      vlan_no_propagate:
        evpn: null
        id: null
        lag: null
        mode: null
        prefix: null
        stp: null
        vni: null
    config_after:
    - lag
    features:
      mixed_trunk: Supports trunk interfaces with mixed routed/bridged VLANs
      model: Conceptual device configuration model
      native_routed: Supports native layer-3 interface on a trunk port
    mode: irb
    no_propagate:
    - start_vlan_id
    - mode
    start_vlan_id: 1000
    supported_on:
    - arubacx
    - cat8000v
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - none
    - nxos
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - lag
    warnings:
      mixed_fwd_check: true
  vrf:
    as: 65000
    attributes:
      global:
        as: asn
        loopback: bool
      interface: id
      link: id
      node:
        as: asn
        loopback: bool
      reserved:
      - default
      - system
      - global
      - base
      - mgmt
      - management
      - mgmt_junos
    config_after:
    - vlan
    - ospf
    - isis
    - bgp
    - mpls
    features:
      bgp: BGP neighbors in VRF BGP instances
      isis: VRF-aware IS-IS
      ospfv2: VRF-aware OSPFv2
      ospfv3: VRF-aware OSPFv3
      ripng: VRF-aware RIPng
      ripv2: VRF-aware RIPv2
    supported_on:
    - arubacx
    - cat8000v
    - csr
    - cumulus
    - cumulus_nvue
    - dellos10
    - eos
    - frr
    - iol
    - ioll2
    - ios
    - iosv
    - iosvl2
    - junos
    - none
    - nxos
    - routeros
    - routeros7
    - srlinux
    - sros
    - unknown
    - vjunos-router
    - vjunos-switch
    - vmx
    - vptx
    - vsrx
    - vyos
    transform_after:
    - vlan
    - bgp
    warnings:
      inactive: true
  vxlan:
    attributes:
      global:
        domain: id
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        use_v6_vtep: bool
        vlans: list
      link:
        vtep: bool
      node:
        domain: id
        flooding:
          type: str
          valid_values:
          - static
          - evpn
        vlans: list
    config_after:
    - vrf
    domain: global
    features:
      vtep6: VXLAN over IPv6
    flooding: static
    no_propagate:
    - use_v6_vtep
    - start_vni
    requires:
    - vlan
    start_vni: 100000
    supported_on:
    - arubacx
    - csr
    - cumulus
    - dellos10
    - eos
    - frr
    - none
    - nxos
    - srlinux
    - sros
    - unknown
    - vyos
    transform_after:
    - vlan
    - vrf
    use_v6_vtep: false
  warnings:
    duplicate_address: true
input:
- /home/pouchou/Nextcloud/logiciels/netlab-ospf-jmp/ospf-4nodes-frr/topology.yml
- package:topology-defaults.yml
links:
- _linkname: links[1]
  bridge: ospf_4node_1
  clab:
    uplink: enp0s31f6
  interfaces:
  - ifindex: 1
    ifname: eth1
    ipv4: 192.168.1.232/24
    node: a1
  linkindex: 1
  node_count: 1
  prefix:
    ipv4: 172.16.0.0/24
  role: stub
  type: stub
- _linkname: links[2]
  interfaces:
  - ifindex: 2
    ifname: eth2
    ipv4: 10.1.0.1/30
    node: a1
  - ifindex: 1
    ifname: eth1
    ipv4: 10.1.0.2/30
    node: a2
  linkindex: 2
  node_count: 2
  prefix:
    ipv4: 10.1.0.0/30
  type: p2p
- _linkname: links[3]
  interfaces:
  - ifindex: 3
    ifname: eth3
    ipv4: 10.1.0.5/30
    node: a1
  - ifindex: 1
    ifname: eth1
    ipv4: 10.1.0.6/30
    node: s1
  linkindex: 3
  node_count: 2
  ospf:
    area: 0.0.0.1
  prefix:
    ipv4: 10.1.0.4/30
  type: p2p
- _linkname: links[4]
  interfaces:
  - ifindex: 4
    ifname: eth4
    ipv4: 10.1.0.9/30
    node: a1
  - ifindex: 1
    ifname: eth1
    ipv4: 10.1.0.10/30
    node: s2
  linkindex: 4
  node_count: 2
  ospf:
    area: 0.0.0.1
  prefix:
    ipv4: 10.1.0.8/30
  type: p2p
- _linkname: links[5]
  interfaces:
  - ifindex: 2
    ifname: eth2
    ipv4: 10.1.0.13/30
    node: a2
  - ifindex: 2
    ifname: eth2
    ipv4: 10.1.0.14/30
    node: s1
  linkindex: 5
  node_count: 2
  ospf:
    area: 0.0.0.1
  prefix:
    ipv4: 10.1.0.12/30
  type: p2p
- _linkname: links[6]
  interfaces:
  - ifindex: 3
    ifname: eth3
    ipv4: 10.1.0.17/30
    node: a2
  - ifindex: 2
    ifname: eth2
    ipv4: 10.1.0.18/30
    node: s2
  linkindex: 6
  node_count: 2
  ospf:
    area: 0.0.0.1
  prefix:
    ipv4: 10.1.0.16/30
  type: p2p
- _linkname: links[7]
  interfaces:
  - ifindex: 3
    ifname: eth3
    ipv4: 10.1.0.21/30
    node: s1
  - ifindex: 3
    ifname: eth3
    ipv4: 10.1.0.22/30
    node: s2
  linkindex: 7
  node_count: 2
  prefix:
    ipv4: 10.1.0.20/30
  type: p2p
message: This lab illustrates the distance vector behavior of inter-area OSPF.
module:
- ospf
name: ospf_4nodes_
nodes:
  a1:
    af:
      ipv4: true
    box: quay.io/frrouting/frr:10.0.1
    clab:
      binds:
      - clab_files/a1/daemons:/etc/frr/daemons
      - clab_files/a1/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ospf_4nodes_-a1
    id: 1
    interfaces:
    - bridge: ospf_4node_1
      ifindex: 1
      ifname: eth1
      ipv4: 192.168.1.232/24
      linkindex: 1
      mtu: 1500
      name: a1 -> stub
      neighbors: []
      ospf:
        area: 0.0.0.0
        passive: true
      role: stub
      type: stub
    - ifindex: 2
      ifname: eth2
      ipv4: 10.1.0.1/30
      linkindex: 2
      mtu: 1500
      name: a1 -> a2
      neighbors:
      - ifname: eth1
        ipv4: 10.1.0.2/30
        node: a2
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 3
      ifname: eth3
      ipv4: 10.1.0.5/30
      linkindex: 3
      mtu: 1500
      name: a1 -> s1
      neighbors:
      - ifname: eth1
        ipv4: 10.1.0.6/30
        node: s1
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 4
      ifname: eth4
      ipv4: 10.1.0.9/30
      linkindex: 4
      mtu: 1500
      name: a1 -> s2
      neighbors:
      - ifname: eth1
        ipv4: 10.1.0.10/30
        node: s2
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 10.0.0.1/32
      neighbors: []
      ospf:
        area: 0.0.0.0
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.101
      mac: 08:4f:a9:00:00:01
    module:
    - ospf
    mtu: 1500
    name: a1
    ospf:
      af:
        ipv4: true
      area: 0.0.0.0
      router_id: 10.0.0.1
  a2:
    af:
      ipv4: true
    box: quay.io/frrouting/frr:10.0.1
    clab:
      binds:
      - clab_files/a2/daemons:/etc/frr/daemons
      - clab_files/a2/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ospf_4nodes_-a2
    id: 2
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv4: 10.1.0.2/30
      linkindex: 2
      mtu: 1500
      name: a2 -> a1
      neighbors:
      - ifname: eth2
        ipv4: 10.1.0.1/30
        node: a1
      ospf:
        area: 0.0.0.0
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 2
      ifname: eth2
      ipv4: 10.1.0.13/30
      linkindex: 5
      mtu: 1500
      name: a2 -> s1
      neighbors:
      - ifname: eth2
        ipv4: 10.1.0.14/30
        node: s1
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 3
      ifname: eth3
      ipv4: 10.1.0.17/30
      linkindex: 6
      mtu: 1500
      name: a2 -> s2
      neighbors:
      - ifname: eth2
        ipv4: 10.1.0.18/30
        node: s2
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 10.0.0.2/32
      neighbors: []
      ospf:
        area: 0.0.0.0
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.102
      mac: 08:4f:a9:00:00:02
    module:
    - ospf
    mtu: 1500
    name: a2
    ospf:
      af:
        ipv4: true
      area: 0.0.0.0
      router_id: 10.0.0.2
  s1:
    af:
      ipv4: true
    box: quay.io/frrouting/frr:10.0.1
    clab:
      binds:
      - clab_files/s1/daemons:/etc/frr/daemons
      - clab_files/s1/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ospf_4nodes_-s1
    id: 3
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv4: 10.1.0.6/30
      linkindex: 3
      mtu: 1500
      name: s1 -> a1
      neighbors:
      - ifname: eth3
        ipv4: 10.1.0.5/30
        node: a1
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 2
      ifname: eth2
      ipv4: 10.1.0.14/30
      linkindex: 5
      mtu: 1500
      name: s1 -> a2
      neighbors:
      - ifname: eth2
        ipv4: 10.1.0.13/30
        node: a2
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 3
      ifname: eth3
      ipv4: 10.1.0.21/30
      linkindex: 7
      mtu: 1500
      name: s1 -> s2
      neighbors:
      - ifname: eth3
        ipv4: 10.1.0.22/30
        node: s2
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 10.0.0.3/32
      neighbors: []
      ospf:
        area: 0.0.0.1
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.103
      mac: 08:4f:a9:00:00:03
    module:
    - ospf
    mtu: 1500
    name: s1
    ospf:
      af:
        ipv4: true
      area: 0.0.0.1
      router_id: 10.0.0.3
  s2:
    af:
      ipv4: true
    box: quay.io/frrouting/frr:10.0.1
    clab:
      binds:
      - clab_files/s2/daemons:/etc/frr/daemons
      - clab_files/s2/hosts:/etc/hosts
      config_templates:
      - daemons:/etc/frr/daemons
      - hosts:/etc/hosts
      kind: linux
    device: frr
    hostname: clab-ospf_4nodes_-s2
    id: 4
    interfaces:
    - ifindex: 1
      ifname: eth1
      ipv4: 10.1.0.10/30
      linkindex: 4
      mtu: 1500
      name: s2 -> a1
      neighbors:
      - ifname: eth4
        ipv4: 10.1.0.9/30
        node: a1
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 2
      ifname: eth2
      ipv4: 10.1.0.18/30
      linkindex: 6
      mtu: 1500
      name: s2 -> a2
      neighbors:
      - ifname: eth3
        ipv4: 10.1.0.17/30
        node: a2
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    - ifindex: 3
      ifname: eth3
      ipv4: 10.1.0.22/30
      linkindex: 7
      mtu: 1500
      name: s2 -> s1
      neighbors:
      - ifname: eth3
        ipv4: 10.1.0.21/30
        node: s1
      ospf:
        area: 0.0.0.1
        network_type: point-to-point
        passive: false
      type: p2p
    loopback:
      ifindex: 0
      ifname: lo
      ipv4: 10.0.0.4/32
      neighbors: []
      ospf:
        area: 0.0.0.1
      type: loopback
      virtual_interface: true
    mgmt:
      ifname: eth0
      ipv4: 192.168.121.104
      mac: 08:4f:a9:00:00:04
    module:
    - ospf
    mtu: 1500
    name: s2
    ospf:
      af:
        ipv4: true
      area: 0.0.0.1
      router_id: 10.0.0.4
ospf:
  area: 0.0.0.0
provider: clab
tools:
  graphite:
    runtime: docker
